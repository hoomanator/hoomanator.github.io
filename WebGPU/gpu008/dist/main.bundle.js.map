{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://webgpu01/./src/helper.ts","webpack://webgpu01/./src/shaders.ts","webpack://webgpu01/./src/main.ts","webpack://webgpu01/webpack/bootstrap","webpack://webgpu01/webpack/startup"],"sourcesContent":["export const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \r\n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\r\n    const buffer = device.createBuffer({\r\n        size: data.byteLength,\r\n        usage: usageFlag,\r\n        mappedAtCreation: true\r\n    });\r\n    new Float32Array(buffer.getMappedRange()).set(data);\r\n    buffer.unmap();\r\n    return buffer;\r\n}\r\n\r\nexport const InitGPU = async () => {\r\n    const checkgpu = CheckWebGPU();\r\n    if(checkgpu.includes('Your current browser does not support WebGPU!')){\r\n        console.log(checkgpu);\r\n        throw('Your current browser does not support WebGPU!');\r\n    }\r\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\r\n    const adapter = await navigator.gpu?.requestAdapter();\r\n    const device = await adapter?.requestDevice() as GPUDevice;\r\n    const context = canvas.getContext('webgpu') as unknown as GPUCanvasContext;\r\n\r\n    const devicePixelRatio = window.devicePixelRatio || 1;\r\n    /*const size = [\r\n        canvas.clientWidth * devicePixelRatio,\r\n        canvas.clientHeight * devicePixelRatio,\r\n    ];*/\r\n    //const format = context.getPreferredFormat(adapter!);\r\n    const format = navigator.gpu.getPreferredCanvasFormat();\r\n\r\n    context.configure({\r\n        device: device,\r\n        format: format,\r\n        //size: size\r\n        alphaMode:'opaque'\r\n    });\r\n    return{ device, canvas, format, context };\r\n};\r\n\r\n\r\nexport const CheckWebGPU = () => {\r\n    let result = 'Great, your current browser supports WebGPU!';\r\n    if (!navigator.gpu) {\r\n        result = `Your current browser does not support WebGPU! Make sure you are on a system \r\n        with WebGPU enabled. Currently, WebGPU is supported in  \r\n        <a href=\"https://www.google.com/chrome/canary/\">Chrome canary</a>\r\n        with the flag \"enable-unsafe-webgpu\" enabled. See the \r\n        <a href=\"https://github.com/gpuweb/gpuweb/wiki/Implementation-Status\"> \r\n        Implementation Status</a> page for more details.   \r\n        You can also use your regular Chrome to try a pre-release version of WebGPU via\r\n        <a href=\"https://developer.chrome.com/origintrials/#/view_trial/118219490218475521\">Origin Trial</a>.                \r\n        `;\r\n    } \r\n\r\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\r\n    if(canvas){\r\n        const div = document.getElementsByClassName('item2')[0] as HTMLDivElement;\r\n        if(div){\r\n            canvas.width  = div.offsetWidth;\r\n            canvas.height = div.offsetHeight;\r\n\r\n            function windowResize() {\r\n                canvas.width  = div.offsetWidth;\r\n                canvas.height = div.offsetHeight;\r\n            };\r\n            window.addEventListener('resize', windowResize);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","export const Shaders = () => {\r\n    const vertex = `\r\n        struct Output {\r\n            @builtin(position) Position : vec4<f32>,\r\n            @location(0) vColor : vec4<f32>,\r\n        };\r\n        @vertex\r\n        fn main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\r\n            var output: Output;\r\n            output.Position = pos;\r\n            output.vColor = color;\r\n            return output;\r\n        }`;\r\n\r\n    const fragment = `\r\n        @fragment\r\n        fn main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\r\n            return vColor;\r\n        }`;\r\n\r\n    return {\r\n        vertex, \r\n        fragment\r\n    };\r\n}\r\n\r\nexport const ShadersOld = () => {\r\n    const vertex = `\r\n        [[location(0)]] var<in> position : vec4<f32>;\r\n        [[location(1)]] var<in> color : vec4<f32>;\r\n        [[builtin(position)]] var<out> Position : vec4<f32>;\r\n        [[location(0)]] var<out> vColor : vec4<f32>;\r\n\r\n        [[stage(vertex)]]\r\n        fn main() -> void {\r\n            Position = position;\r\n            vColor = color;\r\n            return;\r\n        }`;\r\n\r\n    const fragment = `\r\n        [[location(0)]] var<in> vColor : vec4<f32>;\r\n        [[location(0)]] var<out> fragColor : vec4<f32>;\r\n\r\n        [[stage(fragment)]]\r\n        fn main() -> void {\r\n            fragColor = vColor;\r\n            return;\r\n        }`;\r\n\r\n    return {\r\n        vertex, \r\n        fragment\r\n    };\r\n}","import { InitGPU, CreateGPUBuffer } from './helper';\r\nimport { Shaders } from './shaders';\r\n\r\nconst CreateSquare = async () => {\r\n    const gpu = await InitGPU();\r\n    const device = gpu.device;\r\n\r\n    const vertexData = new Float32Array([\r\n        //position    //color\r\n       -0.5, -0.5,    1, 0, 0,  // vertex a\r\n        0.5, -0.5,    0, 1, 0,  // vertex b\r\n       -0.5,  0.5,    1, 1, 0,  // vertex d\r\n       -0.5,  0.5,    1, 1, 0,  // vertex d\r\n        0.5, -0.5,    0, 1, 0,  // vertex b\r\n        0.5,  0.5,    0, 0, 1   // vertex c\r\n   ]);\r\n\r\n    const vertexBuffer = CreateGPUBuffer(device, vertexData);\r\n    \r\n    const shader = Shaders();\r\n    const pipeline = device.createRenderPipeline({\r\n        layout:'auto',\r\n        vertex: {\r\n            module: device.createShaderModule({                    \r\n                code: shader.vertex\r\n            }),\r\n            entryPoint: \"main\",\r\n            buffers:[\r\n                {\r\n                    arrayStride: 4*(2+3),\r\n                    attributes: [\r\n                        {\r\n                            shaderLocation: 0,\r\n                            format: 'float32x2',\r\n                            offset: 0\r\n                        },\r\n                        {\r\n                            shaderLocation: 1,                            \r\n                            format: 'float32x3',\r\n                            offset: 8\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        fragment: {\r\n            module: device.createShaderModule({                    \r\n                code: shader.fragment\r\n            }),\r\n            entryPoint: \"main\",\r\n            targets: [\r\n                {\r\n                    format: gpu.format as GPUTextureFormat\r\n                }\r\n            ]\r\n        },\r\n        primitive:{\r\n            topology: \"triangle-list\",\r\n        }\r\n    });\r\n\r\n    const commandEncoder = device.createCommandEncoder();\r\n    const textureView = gpu.context.getCurrentTexture().createView();\r\n    const renderPass = commandEncoder.beginRenderPass({\r\n        colorAttachments: [{\r\n            view: textureView,\r\n            clearValue: { r: 0.5, g: 0.5, b: 0.8, a: 1.0 }, //background color\r\n            loadOp:'clear',\r\n            storeOp: 'store'\r\n        }]\r\n    });\r\n    renderPass.setPipeline(pipeline);\r\n    renderPass.setVertexBuffer(0, vertexBuffer);\r\n    renderPass.draw(6);\r\n    renderPass.end();\r\n\r\n    device.queue.submit([commandEncoder.finish()]);\r\n}\r\n\r\nCreateSquare();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(927);\n"],"names":["CreateGPUBuffer","device","data","usageFlag","GPUBufferUsage","VERTEX","COPY_DST","buffer","createBuffer","size","byteLength","usage","mappedAtCreation","Float32Array","getMappedRange","set","unmap","InitGPU","checkgpu","CheckWebGPU","includes","console","log","canvas","document","getElementById","adapter","navigator","gpu","requestAdapter","requestDevice","context","getContext","format","window","devicePixelRatio","getPreferredCanvasFormat","configure","alphaMode","result","div","getElementsByClassName","windowResize","width","offsetWidth","height","offsetHeight","addEventListener","Shaders","vertex","fragment","ShadersOld","vertexData","vertexBuffer","shader","pipeline","createRenderPipeline","layout","module","createShaderModule","code","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","targets","primitive","topology","commandEncoder","createCommandEncoder","textureView","getCurrentTexture","createView","renderPass","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","setPipeline","setVertexBuffer","draw","end","queue","submit","finish","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","__webpack_modules__","call"],"sourceRoot":""}