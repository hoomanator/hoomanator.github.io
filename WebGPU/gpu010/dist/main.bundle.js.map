{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://webgpu01/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://webgpu01/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://webgpu01/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://webgpu01/./src/site.css","webpack://webgpu01/./src/helper.ts","webpack://webgpu01/./node_modules/css-loader/dist/runtime/api.js","webpack://webgpu01/./src/vertex_data.ts","webpack://webgpu01/./src/site.css?7390","webpack://webgpu01/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://webgpu01/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://webgpu01/./src/shader.wgsl","webpack://webgpu01/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://webgpu01/./src/main.ts","webpack://webgpu01/./node_modules/gl-matrix/esm/common.js","webpack://webgpu01/./node_modules/gl-matrix/esm/mat2.js","webpack://webgpu01/./node_modules/gl-matrix/esm/mat2d.js","webpack://webgpu01/./node_modules/gl-matrix/esm/mat3.js","webpack://webgpu01/./node_modules/gl-matrix/esm/mat4.js","webpack://webgpu01/./node_modules/gl-matrix/esm/vec3.js","webpack://webgpu01/./node_modules/gl-matrix/esm/vec4.js","webpack://webgpu01/./node_modules/gl-matrix/esm/quat.js","webpack://webgpu01/./node_modules/gl-matrix/esm/quat2.js","webpack://webgpu01/./node_modules/gl-matrix/esm/vec2.js","webpack://webgpu01/./node_modules/css-loader/dist/runtime/cssWithMappingToString.js","webpack://webgpu01/webpack/bootstrap","webpack://webgpu01/webpack/runtime/compat get default export","webpack://webgpu01/webpack/runtime/define property getters","webpack://webgpu01/webpack/runtime/hasOwnProperty shorthand","webpack://webgpu01/webpack/runtime/make namespace object","webpack://webgpu01/webpack/runtime/nonce","webpack://webgpu01/webpack/startup"],"sourcesContent":["\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".grid {\\n    display: grid;\\n    height: calc(100vh - 20px);\\n    grid-template-columns: repeat(8, 1fr);\\n    grid-template-rows: 100%;\\n }\\n .grid1 {\\n    display: grid;\\n    height: 35px;\\n    grid-template-columns: repeat(8, 1fr);\\n    grid-template-rows: 35px;\\n }\\n .item1 {\\n    grid-column: 1/3;\\n }\\n .item2 {\\n    grid-column: 3/9;\\n }\\n .item3 {\\n    grid-column: 1/4;\\n }\\n .item4 {\\n    grid-column: 4/8;\\n }\\n\\n select, input[type=\\\"text\\\"]{\\n    width:100%;\\n    height:22px;\\n    box-sizing:border-box;\\n }\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/site.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,0BAA0B;IAC1B,qCAAqC;IACrC,wBAAwB;CAC3B;CACA;IACG,aAAa;IACb,YAAY;IACZ,qCAAqC;IACrC,wBAAwB;CAC3B;CACA;IACG,gBAAgB;CACnB;CACA;IACG,gBAAgB;CACnB;CACA;IACG,gBAAgB;CACnB;CACA;IACG,gBAAgB;CACnB;;CAEA;IACG,UAAU;IACV,WAAW;IACX,qBAAqB;CACxB\",\"sourcesContent\":[\".grid {\\n    display: grid;\\n    height: calc(100vh - 20px);\\n    grid-template-columns: repeat(8, 1fr);\\n    grid-template-rows: 100%;\\n }\\n .grid1 {\\n    display: grid;\\n    height: 35px;\\n    grid-template-columns: repeat(8, 1fr);\\n    grid-template-rows: 35px;\\n }\\n .item1 {\\n    grid-column: 1/3;\\n }\\n .item2 {\\n    grid-column: 3/9;\\n }\\n .item3 {\\n    grid-column: 1/4;\\n }\\n .item4 {\\n    grid-column: 4/8;\\n }\\n\\n select, input[type=\\\"text\\\"]{\\n    width:100%;\\n    height:22px;\\n    box-sizing:border-box;\\n }\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { vec3, mat4 } from 'gl-matrix';\n\nexport const CreateTransforms = (modelMat:mat4, translation:vec3 = [0,0,0], rotation:vec3 = [0,0,0], scaling:vec3 = [1,1,1]) => {\n    const rotateXMat = mat4.create();\n    const rotateYMat = mat4.create();\n    const rotateZMat = mat4.create();   \n    const translateMat = mat4.create();\n    const scaleMat = mat4.create();\n\n    //perform individual transformations\n    mat4.fromTranslation(translateMat, translation);\n    mat4.fromXRotation(rotateXMat, rotation[0]);\n    mat4.fromYRotation(rotateYMat, rotation[1]);\n    mat4.fromZRotation(rotateZMat, rotation[2]);\n    mat4.fromScaling(scaleMat, scaling);\n\n    //combine all transformation matrices together to form a final transform matrix: modelMat\n    mat4.multiply(modelMat, rotateXMat, scaleMat);\n    mat4.multiply(modelMat, rotateYMat, modelMat);        \n    mat4.multiply(modelMat, rotateZMat, modelMat);\n    mat4.multiply(modelMat, translateMat, modelMat);\n};\n\nexport const CreateViewProjection = (respectRatio = 1.0, cameraPosition:vec3 = [2, 2, 4], lookDirection:vec3 = [0, 0, 0], \n    upDirection:vec3 = [0, 1, 0]) => {\n\n    const viewMatrix = mat4.create();\n    const projectionMatrix = mat4.create();       \n    const viewProjectionMatrix = mat4.create();\n    mat4.perspective(projectionMatrix, 2*Math.PI/5, respectRatio, 0.1, 100.0);\n\n    mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\n    mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    const cameraOption = {\n        eye: cameraPosition,\n        center: lookDirection,\n        zoomMax: 100,\n        zoomSpeed: 2\n    };\n\n    return {\n        viewMatrix,\n        projectionMatrix,\n        viewProjectionMatrix,\n        cameraOption\n    }\n};\n\n\nexport const CreateGPUBufferUint = (device:GPUDevice, data:Uint32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Uint32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n};\n\nexport const CreateGPUBuffer = (device:GPUDevice, data:Float32Array, \n    usageFlag:GPUBufferUsageFlags = GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST) => {\n    const buffer = device.createBuffer({\n        size: data.byteLength,\n        usage: usageFlag,\n        mappedAtCreation: true\n    });\n    new Float32Array(buffer.getMappedRange()).set(data);\n    buffer.unmap();\n    return buffer;\n};\n\nexport const InitGPU = async () => {\n    const checkgpu = CheckWebGPU();\n    if(checkgpu.includes('Your current browser does not support WebGPU!')){\n        console.log(checkgpu);\n        throw('Your current browser does not support WebGPU!');\n    }\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\n    const adapter = await navigator.gpu?.requestAdapter();\n    const device = await adapter?.requestDevice() as GPUDevice;\n    const context = canvas.getContext('webgpu') as GPUCanvasContext;\n\n    /*const devicePixelRatio = window.devicePixelRatio || 1;\n    const size = [\n        canvas.clientWidth * devicePixelRatio,\n        canvas.clientHeight * devicePixelRatio,\n    ];*/\n    //const format = context.getPreferredFormat(adapter!);\n    const format = navigator.gpu.getPreferredCanvasFormat();\n    context.configure({\n        device: device,\n        format: format,\n        //size: size\n        alphaMode:'opaque'\n    });\n    return{ device, canvas, format, context };\n};\n\n/*export const InitGPU = async () => {\n    const checkgpu = CheckWebGPU();\n    if(checkgpu.includes('Your current browser does not support WebGPU!')){\n        console.log(checkgpu);\n        throw('Your current browser does not support WebGPU!');\n    }\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\n    const adapter = await navigator.gpu?.requestAdapter();\n    const device = await adapter?.requestDevice() as GPUDevice;\n    const context = canvas.getContext('gpupresent') as unknown as GPUCanvasContext;\n    const swapChainFormat = 'bgra8unorm';\n    const swapChain = context.configureSwapChain({\n        device: device,\n        format: swapChainFormat\n    });\n    return{device, canvas, swapChainFormat, swapChain };\n};*/\n\nexport const CheckWebGPU = () => {\n    let result = 'Great, your current browser supports WebGPU!';\n    if (!navigator.gpu) {\n        result = `Your current browser does not support WebGPU! Make sure you are on a system \n                    with WebGPU enabled. Currently, WebGPU is supported in  \n                    <a href=\"https://www.google.com/chrome/canary/\">Chrome canary</a>\n                    with the flag \"enable-unsafe-webgpu\" enabled. See the \n                    <a href=\"https://github.com/gpuweb/gpuweb/wiki/Implementation-Status\"> \n                    Implementation Status</a> page for more details.   \n                    You can also use your regular Chrome to try a pre-release version of WebGPU via\n                    <a href=\"https://developer.chrome.com/origintrials/#/view_trial/118219490218475521\">Origin Trial</a>.                \n                `;\n    } \n\n    const canvas = document.getElementById('canvas-webgpu') as HTMLCanvasElement;\n    if(canvas){\n        const div = document.getElementsByClassName('item2')[0] as HTMLDivElement;\n        if(div){\n            canvas.width  = div.offsetWidth;\n            canvas.height = div.offsetHeight;\n\n            function windowResize() {\n                canvas.width  = div.offsetWidth;\n                canvas.height = div.offsetHeight;\n            };\n            window.addEventListener('resize', windowResize);\n        }\n    }\n\n    return result;\n};","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \"\"]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};","export const CubeData = () =>{\n    const positions = new Float32Array([\n        // front\n        -1, -1,  1,  \n         1, -1,  1,  \n         1,  1,  1,\n         1,  1,  1,\n        -1,  1,  1,\n        -1, -1,  1,\n\n        // right\n         1, -1,  1,\n         1, -1, -1,\n         1,  1, -1,\n         1,  1, -1,\n         1,  1,  1,\n         1, -1,  1,\n\n        // back\n        -1, -1, -1,\n        -1,  1, -1,\n         1,  1, -1,\n         1,  1, -1,\n         1, -1, -1,\n        -1, -1, -1,\n\n        // left\n        -1, -1,  1,\n        -1,  1,  1,\n        -1,  1, -1,\n        -1,  1, -1,\n        -1, -1, -1,\n        -1, -1,  1,\n\n        // top\n        -1,  1,  1,\n         1,  1,  1,\n         1,  1, -1,\n         1,  1, -1,\n        -1,  1, -1,\n        -1,  1,  1,\n\n        // bottom\n        -1, -1,  1,\n        -1, -1, -1,\n         1, -1, -1,\n         1, -1, -1,\n         1, -1,  1,\n        -1, -1,  1\n    ]);\n\n    const colors = new Float32Array([\n        // front - blue\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n\n        // right - red\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n        1, 0, 0,\n\n        //back - yellow\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n        1, 1, 0,\n\n        //left - aqua\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n        0, 1, 1,\n\n        // top - green\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n        0, 1, 0,\n\n        // bottom - fuchsia\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1,\n        1, 0, 1\n    ]);\n\n    return {\n        positions,\n        colors\n    };\n}","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./site.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./site.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;","\"use strict\";\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;","export default \"// vertex shader\\n\\nstruct Uniforms {\\n    mvpMatrix : mat4x4<f32>,\\n};\\n@binding(0) @group(0) var<uniform> uniforms : Uniforms;\\n\\nstruct Output {\\n    @builtin(position) Position : vec4<f32>,\\n    @location(0) vColor : vec4<f32>,\\n};\\n\\n@vertex\\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\\n    var output: Output;\\n    output.Position = uniforms.mvpMatrix * pos;\\n    output.vColor = color;\\n    return output;\\n}\\n\\n// fragment shader\\n\\n @fragment\\nfn fs_main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\\n    return vColor;\\n}\"","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n\n  var needLayer = typeof obj.layer !== \"undefined\";\n\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += \"}\";\n  }\n\n  if (obj.media) {\n    css += \"}\";\n  }\n\n  if (obj.supports) {\n    css += \"}\";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;","import { InitGPU, CreateGPUBuffer, CreateTransforms, CreateViewProjection } from './helper';\nimport shader from './shader.wgsl';\nimport \"./site.css\";\nimport { CubeData } from './vertex_data';\nimport { mat4 } from 'gl-matrix';\n\nconst Create3DObject = async () => {\n    const gpu = await InitGPU();\n    const device = gpu.device;\n\n    // create vertex buffers\n    const cubeData = CubeData();\n    const numberOfVertices = cubeData.positions.length / 3;\n    const vertexBuffer = CreateGPUBuffer(device, cubeData.positions);\n    const colorBuffer = CreateGPUBuffer(device, cubeData.colors);\n \n    const pipeline = device.createRenderPipeline({\n        layout:'auto',\n        vertex: {\n            module: device.createShaderModule({                    \n                code: shader\n            }),\n            entryPoint: \"vs_main\",\n            buffers:[\n                {\n                    arrayStride: 12,\n                    attributes: [{\n                        shaderLocation: 0,\n                        format: \"float32x3\",\n                        offset: 0\n                    }]\n                },\n                {\n                    arrayStride: 12,\n                    attributes: [{\n                        shaderLocation: 1,\n                        format: \"float32x3\",\n                        offset: 0\n                    }]\n                }\n            ]\n        },\n        fragment: {\n            module: device.createShaderModule({                    \n                code: shader\n            }),\n            entryPoint: \"fs_main\",\n            targets: [\n                {\n                    format: gpu.format as GPUTextureFormat\n                }\n            ]\n        },\n        primitive:{\n            topology: \"triangle-list\",\n            cullMode: 'back'\n        },\n        depthStencil:{\n            format: \"depth24plus\",\n            depthWriteEnabled: true,\n            depthCompare: \"less\"\n        }\n    });\n\n    // create uniform data\n    const modelMatrix = mat4.create();\n    const mvpMatrix = mat4.create();\n    let vpMatrix = mat4.create();\n    const vp = CreateViewProjection(gpu.canvas.width/gpu.canvas.height);\n    vpMatrix = vp.viewProjectionMatrix;\n\n    // create uniform buffer and bind group\n    const uniformBuffer = device.createBuffer({\n        size: 64,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n    });\n\n    const uniformBindGroup = device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n            {\n                binding: 0,\n                resource: {\n                    buffer: uniformBuffer,\n                    offset: 0,\n                    size: 64\n                }\n            }\n        ]\n    });\n\n    const textureView = gpu.context.getCurrentTexture().createView();\n    const depthTexture = device.createTexture({\n        size: [gpu.canvas.width, gpu.canvas.height, 1],\n        format: \"depth24plus\",\n        usage: GPUTextureUsage.RENDER_ATTACHMENT\n    });\n    const renderPassDescription = {\n        colorAttachments: [{\n            view: textureView,\n            clearValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0  }, //background color\n            //loadValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0  }, \n            loadOp: 'clear',\n            storeOp: 'store'\n        }],\n        depthStencilAttachment: {\n            view: depthTexture.createView(),\n            depthLoadValue: 1.0,\n            depthClearValue: 1.0,\n            depthLoadOp: 'clear',\n            depthStoreOp: \"store\",\n            /*stencilClearValue: 0,\n            stencilLoadValue: 0,\n            stencilLoadOp: 'clear',\n            stencilStoreOp: \"store\"*/\n        }\n    };\n    \n    CreateTransforms(modelMatrix);\n    mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n    device.queue.writeBuffer(uniformBuffer, 0, mvpMatrix as ArrayBuffer);\n\n    const commandEncoder = device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass(renderPassDescription as GPURenderPassDescriptor);\n    renderPass.setPipeline(pipeline);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n    renderPass.setVertexBuffer(1, colorBuffer);\n    renderPass.setBindGroup(0, uniformBindGroup);\n    renderPass.draw(numberOfVertices);\n    renderPass.end();\n\n    device.queue.submit([commandEncoder.finish()]);\n}\n\nCreate3DObject();\n\nwindow.addEventListener('resize', function(){\n    Create3DObject();\n});","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","\"use strict\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = function cssWithMappingToString(item) {\n  var _item = _slicedToArray(item, 4),\n      content = _item[1],\n      cssMapping = _item[3];\n\n  if (typeof btoa === \"function\") {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n  }\n\n  return [content].join(\"\\n\");\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nc = undefined;","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(927);\n"],"names":["module","exports","styleElement","nonce","setAttribute","stylesInDOM","getIndexByIdentifier","identifier","result","i","length","modulesToDom","list","options","idCountMap","identifiers","item","id","base","count","concat","indexByIdentifier","obj","css","media","sourceMap","supports","layer","references","updater","addElementStyle","byIndex","splice","push","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","styleSheet","cssText","firstChild","removeChild","appendChild","document","createTextNode","___CSS_LOADER_EXPORT___","CreateTransforms","modelMat","translation","rotation","scaling","rotateXMat","mat4","create","rotateYMat","rotateZMat","translateMat","scaleMat","fromTranslation","fromXRotation","fromYRotation","fromZRotation","fromScaling","multiply","CreateViewProjection","respectRatio","cameraPosition","lookDirection","upDirection","viewMatrix","projectionMatrix","viewProjectionMatrix","perspective","Math","PI","lookAt","cameraOption","eye","center","zoomMax","zoomSpeed","CreateGPUBufferUint","device","data","usageFlag","GPUBufferUsage","INDEX","COPY_DST","buffer","createBuffer","size","byteLength","usage","mappedAtCreation","Uint32Array","getMappedRange","set","unmap","CreateGPUBuffer","VERTEX","Float32Array","InitGPU","checkgpu","CheckWebGPU","includes","console","log","canvas","getElementById","adapter","navigator","gpu","requestAdapter","requestDevice","context","getContext","format","getPreferredCanvasFormat","configure","alphaMode","div","getElementsByClassName","windowResize","width","offsetWidth","height","offsetHeight","window","addEventListener","cssWithMappingToString","toString","this","map","content","join","modules","mediaQuery","dedupe","alreadyImportedModules","CubeData","positions","colors","styleTagTransform","setAttributes","insert","insertStyleElement","locals","undefined","element","createElement","attributes","memo","style","target","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","needLayer","btoa","unescape","encodeURIComponent","JSON","stringify","apply","parentNode","removeStyleElement","Create3DObject","cubeData","numberOfVertices","vertexBuffer","colorBuffer","pipeline","createRenderPipeline","layout","vertex","createShaderModule","code","entryPoint","buffers","arrayStride","shaderLocation","offset","fragment","targets","primitive","topology","cullMode","depthStencil","depthWriteEnabled","depthCompare","modelMatrix","mvpMatrix","vpMatrix","uniformBuffer","UNIFORM","uniformBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","renderPassDescription","colorAttachments","view","getCurrentTexture","createView","clearValue","r","g","b","a","loadOp","storeOp","depthStencilAttachment","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","depthLoadValue","depthClearValue","depthLoadOp","depthStoreOp","queue","writeBuffer","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","setPipeline","setVertexBuffer","setBindGroup","draw","end","submit","finish","EPSILON","ARRAY_TYPE","Array","RANDOM","random","setMatrixArrayType","type","degree","toRadian","equals","abs","max","out","clone","copy","identity","fromValues","m00","m01","m10","m11","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","str","frob","hypot","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","y","arguments","sqrt","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromRotationTranslation","xy","xz","yz","fromQuat2","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","mag","cosine","acos","zero","vec","dist","sqrDist","sqrLen","forEach","stride","fn","arg","l","dot","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","rotationTo","sqlerp","setAxes","dq","w1","fromRotationTranslationValues","outer","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","_arrayLikeToArray","arr","arr2","_item","isArray","_arrayWithHoles","Symbol","iterator","Object","_arr","_n","_d","_e","_s","next","done","value","err","_iterableToArrayLimit","minLen","n","prototype","call","slice","constructor","name","from","test","_unsupportedIterableToArray","TypeError","_nonIterableRest","cssMapping","base64","sourceMapping","sourceURLs","sources","source","sourceRoot","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","definition","key","defineProperty","enumerable","get","prop","hasOwnProperty","toStringTag","nc"],"sourceRoot":""}